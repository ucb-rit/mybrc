# -*- coding: utf-8 -*-
# Generated by Django 1.11.4 on 2018-08-17 21:51
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('accountid', models.AutoField(db_column='AccountID', primary_key=True, serialize=False)),
                ('accountname', models.CharField(db_column='AccountName', max_length=50)),
                ('accountallocation', models.IntegerField(db_column='AccountAllocation')),
                ('accountbalance', models.IntegerField(db_column='AccountBalance')),
                ('type', models.CharField(db_column='Type', max_length=10)),
                ('description', models.CharField(db_column='Description', max_length=150)),
                ('created', models.DateTimeField(auto_now_add=True, db_column='Created')),
                ('updated', models.DateTimeField(auto_now_add=True, db_column='Updated')),
            ],
            options={
                'db_table': 'Account',
            },
        ),
        migrations.CreateModel(
            name='Accounttransaction',
            fields=[
                ('transactionid', models.AutoField(db_column='TransactionID', primary_key=True, serialize=False)),
                ('accountid', models.IntegerField(db_column='AccountID')),
                ('allocatedon', models.DateTimeField(db_column='AllocatedOn')),
                ('newaccountallocation', models.FloatField(db_column='NewAccountAllocation')),
                ('isactive', models.IntegerField(db_column='isActive')),
                ('accountmetadata', models.TextField(db_column='AccountMetadata')),
                ('created', models.DateTimeField(auto_now_add=True, db_column='Created')),
                ('updated', models.DateTimeField(auto_now_add=True, db_column='Updated')),
            ],
            options={
                'db_table': 'AccountTransaction',
            },
        ),
        migrations.CreateModel(
            name='Job',
            fields=[
                ('jobnumber', models.BigAutoField(db_column='JobNumber', primary_key=True, serialize=False)),
                ('jobslurmid', models.IntegerField(db_column='JobSlurmID')),
                ('submitdate', models.DateTimeField(db_column='SubmitDate')),
                ('startdate', models.DateTimeField(blank=True, db_column='StartDate', null=True)),
                ('enddate', models.DateTimeField(blank=True, db_column='EndDate', null=True)),
                ('userid', models.IntegerField(db_column='UserID')),
                ('accountid', models.IntegerField(db_column='AccountID')),
                ('amount', models.FloatField(db_column='Amount')),
                ('jobstatus', models.IntegerField(db_column='JobStatus')),
                ('partition', models.IntegerField(db_column='Partition')),
                ('qos', models.SmallIntegerField(db_column='QOS')),
                ('created', models.DateTimeField(auto_now_add=True, db_column='Created')),
                ('updated', models.DateTimeField(auto_now_add=True, db_column='Updated')),
            ],
            options={
                'db_table': 'Job',
            },
        ),
        migrations.CreateModel(
            name='Jobstatusdict',
            fields=[
                ('jobstatus', models.AutoField(db_column='JobStatus', primary_key=True, serialize=False)),
                ('description', models.CharField(db_column='Description', max_length=150)),
                ('created', models.DateTimeField(auto_now_add=True, db_column='Created')),
                ('updated', models.DateTimeField(auto_now_add=True, db_column='Updated')),
            ],
            options={
                'db_table': 'JobStatusDict',
            },
        ),
        migrations.CreateModel(
            name='Partitiondict',
            fields=[
                ('partition', models.AutoField(db_column='Partition', primary_key=True, serialize=False)),
                ('description', models.CharField(db_column='Description', max_length=150)),
                ('created', models.DateTimeField(auto_now_add=True, db_column='Created')),
                ('updated', models.DateTimeField(auto_now_add=True, db_column='Updated')),
            ],
            options={
                'db_table': 'PartitionDict',
            },
        ),
        migrations.CreateModel(
            name='Permdict',
            fields=[
                ('perm', models.AutoField(db_column='Perm', primary_key=True, serialize=False)),
                ('description', models.CharField(db_column='Description', max_length=150)),
                ('created', models.DateTimeField(auto_now_add=True, db_column='Created')),
                ('updated', models.DateTimeField(auto_now_add=True, db_column='Updated')),
            ],
            options={
                'db_table': 'PermDict',
            },
        ),
        migrations.CreateModel(
            name='Qosdict',
            fields=[
                ('qos', models.SmallIntegerField(db_column='QOS', primary_key=True, serialize=False)),
                ('description', models.CharField(db_column='Description', max_length=150)),
                ('created', models.DateTimeField(auto_now_add=True, db_column='Created')),
                ('updated', models.DateTimeField(auto_now_add=True, db_column='Updated')),
            ],
            options={
                'db_table': 'QOSDict',
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('accountid', models.IntegerField(db_column='AccountID', primary_key=True, serialize=False)),
                ('userid', models.IntegerField(db_column='UserID')),
                ('permission', models.IntegerField(blank=True, db_column='Permission', null=True)),
                ('created', models.DateTimeField(auto_now_add=True, db_column='Created')),
                ('updated', models.DateTimeField(auto_now_add=True, db_column='Updated')),
            ],
            options={
                'db_table': 'Role',
            },
        ),
        migrations.CreateModel(
            name='Roledict',
            fields=[
                ('role', models.AutoField(db_column='Role', primary_key=True, serialize=False)),
                ('perm', models.IntegerField(db_column='Perm')),
                ('created', models.DateTimeField(auto_now_add=True, db_column='Created')),
                ('updated', models.DateTimeField(auto_now_add=True, db_column='Updated')),
            ],
            options={
                'db_table': 'RoleDict',
            },
        ),
        migrations.CreateModel(
            name='Superuser',
            fields=[
                ('userid', models.AutoField(db_column='UserID', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='Name', max_length=50)),
                ('ldapuid', models.IntegerField(db_column='LDAPUID')),
                ('created', models.DateTimeField(auto_now_add=True, db_column='Created')),
                ('updated', models.DateTimeField(auto_now_add=True, db_column='Updated')),
            ],
            options={
                'db_table': 'SuperUser',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('userid', models.AutoField(db_column='UserID', primary_key=True, serialize=False)),
                ('username', models.CharField(db_column='UserName', max_length=20)),
                ('usermetadata', models.TextField(db_column='UserMetadata')),
                ('email', models.CharField(db_column='Email', max_length=100)),
                ('ldapuid', models.IntegerField(db_column='LDAPUID')),
                ('calnetuid', models.IntegerField(db_column='CalNetUID')),
                ('created', models.DateTimeField(auto_now_add=True, db_column='Created')),
                ('updated', models.DateTimeField(auto_now_add=True, db_column='Updated')),
            ],
            options={
                'db_table': 'User',
            },
        ),
        migrations.CreateModel(
            name='Useraccountassociation',
            fields=[
                ('useraccountassociationid', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('userallocation', models.IntegerField(db_column='UserAllocation')),
                ('userbalance', models.IntegerField(db_column='UserBalance')),
                ('created', models.DateTimeField(auto_now_add=True, db_column='Created')),
                ('updated', models.DateTimeField(auto_now_add=True, db_column='Updated')),
                ('accountid', models.ForeignKey(db_column='AccountID', on_delete=django.db.models.deletion.CASCADE, to='api.Account')),
                ('userid', models.ForeignKey(db_column='UserID', on_delete=django.db.models.deletion.CASCADE, to='api.User')),
            ],
            options={
                'db_table': 'UserAccountAssociation',
            },
        ),
        migrations.AddField(
            model_name='user',
            name='accounts',
            field=models.ManyToManyField(through='api.Useraccountassociation', to='api.Account'),
        ),
        migrations.AlterUniqueTogether(
            name='role',
            unique_together=set([('accountid', 'userid')]),
        ),
        migrations.AddField(
            model_name='account',
            name='users',
            field=models.ManyToManyField(through='api.Useraccountassociation', to='api.User'),
        ),
        migrations.AlterUniqueTogether(
            name='useraccountassociation',
            unique_together=set([('userid', 'accountid')]),
        ),
    ]
